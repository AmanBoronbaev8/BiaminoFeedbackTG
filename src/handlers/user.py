"""User handlers for employee functionality."""
import html
from datetime import datetime
from typing import Dict, List
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from ..config_data import Config
from ..services import GoogleSheetsService
from ..states import ReportStates
from ..utils.telegram_utils import parse_telegram_ids, is_admin, format_task_name


user_router = Router()


async def auto_authenticate_user(message: Message, state: FSMContext, sheets_service: GoogleSheetsService, config: Config = None) -> bool:
    """Automatically authenticate user based on TelegramID."""
    try:
        telegram_id = message.from_user.id
        
        # Check if user is admin first - admins don't need to be in employee database
        if config and is_admin(telegram_id, config):
            await state.update_data(
                employee_data={"ID": f"admin_{telegram_id}", "–ò–º—è": "Admin", "–§–∞–º–∏–ª–∏—è": "User"},
                employee_id=f"admin_{telegram_id}",
                authenticated=True,
                is_admin=True
            )
            
            await message.answer(
                "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
            logger.info(f"Admin {telegram_id} authenticated successfully")
            return True
        
        # Check Google Sheets availability before attempting to authenticate employee
        sheets_available = await sheets_service.check_sheets_availability()
        if not sheets_available:
            await message.answer(
                "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logger.warning(f"Authentication failed for {telegram_id} - Google Sheets unavailable")
            return False
        
        # Try to find employee by TelegramID
        employee_data = await sheets_service.get_employee_by_telegram_id(telegram_id)
        
        if employee_data:
            # Store employee data permanently
            await state.update_data(
                employee_data=employee_data,
                employee_id=employee_data.get(config.team_id_col if config else "ID", ""),
                authenticated=True,
                is_admin=False
            )
            
            # Get full name using config
            if config:
                first_name = employee_data.get(config.team_firstname_col, "")
                last_name = employee_data.get(config.team_lastname_col, "")
            else:
                first_name = employee_data.get("–ò–º—è", "")
                last_name = employee_data.get("–§–∞–º–∏–ª–∏—è", "")
            full_name = f"{last_name} {first_name}".strip()
            
            # Send authentication success message
            auth_text = f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {full_name}! ‚úÖ"
            await message.answer(auth_text)
            
            logger.info(f"User {telegram_id} authenticated as {full_name}")
            return True
        else:
            # User not found in the system
            await message.answer(
                "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            logger.warning(f"Unknown user with TelegramID {telegram_id} tried to access the bot")
            return False
            
    except Exception as e:
        logger.error(f"Error in auto authentication: {e}")
        
        # Handle specific Google Sheets read-only replica errors
        if "read only replica" in str(e).lower():
            await message.answer(
                "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç Google Sheets. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, sheets_service: GoogleSheetsService, config: Config):
    """Handle /start command with automatic authentication."""
    # Check if user is already authenticated
    data = await state.get_data()
    if data.get("authenticated"):
        employee_data = data.get("employee_data", {})
        if data.get("is_admin"):
            await message.answer(
                "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
        else:
            # Use config for field names
            if config:
                first_name = employee_data.get(config.team_firstname_col, "")
                last_name = employee_data.get(config.team_lastname_col, "")
            else:
                first_name = employee_data.get("–ò–º—è", "")
                last_name = employee_data.get("–§–∞–º–∏–ª–∏—è", "")
            full_name = f"{last_name} {first_name}".strip()
            
            await message.answer(
                f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {full_name}! ‚úÖ\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞."
            )
        return
    
    # Auto-authenticate based on TelegramID
    await auto_authenticate_user(message, state, sheets_service, config)


@user_router.message(Command("report"))
async def cmd_report(message: Message, state: FSMContext, sheets_service: GoogleSheetsService):
    """Handle /report command."""
    try:
        data = await state.get_data()
        
        if not data.get("authenticated"):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        employee_id = data.get("employee_id", "")
        
        # Get tasks that don't have reports for today
        tasks_without_reports = await sheets_service.get_tasks_without_reports_today(employee_id)
        
        await start_report_collection(message, state, sheets_service, tasks_without_reports)
        
    except Exception as e:
        logger.error(f"Error handling report command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def start_report_collection(message: Message, state: FSMContext, sheets_service: GoogleSheetsService = None, tasks_without_reports: List[Dict] = None):
    """Start the report collection process with task selection or without tasks."""
    if not sheets_service:
        # Get sheets_service from state if not provided (for callback scenarios)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –µ—â–µ —Ä–∞–∑.")
        return
        
    data = await state.get_data()
    employee_id = data.get("employee_id", "")
    
    # Get tasks if not provided
    if tasks_without_reports is None:
        tasks_without_reports = await sheets_service.get_tasks_without_reports_today(employee_id)
    
    # Create task selection keyboard
    builder = InlineKeyboardBuilder()
    
    # Add tasks if available
    if tasks_without_reports:
        for task in tasks_without_reports:
            task_id = task.get('task_id', '')
            task_text = task.get('task', '')
            task_preview = format_task_name(task_text)
            
            builder.row(
                InlineKeyboardButton(
                    text=f"üî∏ {task_preview}", 
                    callback_data=f"select_task_{task_id}"
                )
            )
    
    # Always add option for general report (without task)
    builder.row(
        InlineKeyboardButton(
            text="üìù –û–±—â–∏–π –æ—Ç—á–µ—Ç (–±–µ–∑ –∑–∞–¥–∞—á–∏)", 
            callback_data="select_general_report"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")
    )
    
    # Store tasks in state for later use
    await state.update_data(available_tasks=tasks_without_reports)
    
    if tasks_without_reports:
        task_text = (
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—â–∏–π –æ—Ç—á–µ—Ç:\n\n"
            "üìã <b>–ó–∞–¥–∞—á–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç:</b>\n"
        )
        
        for i, task in enumerate(tasks_without_reports, 1):
            deadline = task.get('deadline', '')
            deadline_text = f" (–¥–æ {deadline})" if deadline else ""
            formatted_task = format_task_name(task.get('task', ''))
            task_text += f"{i}. {formatted_task}{deadline_text}\n"
            
        task_text += "\nüìù –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—â–∏–π –æ—Ç—á–µ—Ç –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ."
    else:
        task_text = (
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–∞.\n\n"
            "üìù –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å."
        )
    
    await message.answer(task_text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(ReportStates.selecting_task)


@user_router.callback_query(F.data == "select_general_report", ReportStates.selecting_task)
async def select_general_report(callback: CallbackQuery, state: FSMContext):
    """Handle selection of general report (without specific task)."""
    try:
        # Store that this is a general report
        await state.update_data(selected_task={"task_id": "", "task": "–û–±—â–∏–π –æ—Ç—á–µ—Ç"})
        
        # Show message for general report
        general_report_text = (
            "üìù <b>–û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å</b>\n\n"
            "üîπ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å? "
            "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏, —Å –∫–∞–∫–∏–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å?"
        )
        
        await callback.message.edit_text(
            general_report_text, 
            parse_mode="HTML", 
            reply_markup=None
        )
        await state.set_state(ReportStates.waiting_for_feedback)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in general report selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@user_router.callback_query(F.data.startswith("select_task_"), ReportStates.selecting_task)
async def select_task_for_report(callback: CallbackQuery, state: FSMContext):
    """Handle task selection for report."""
    try:
        task_id = callback.data.split("_", 2)[2]
        
        # Get task details from stored available tasks
        data = await state.get_data()
        available_tasks = data.get("available_tasks", [])
        
        selected_task = None
        for task in available_tasks:
            if task.get('task_id') == task_id:
                selected_task = task
                break
                
        if not selected_task:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
            
        # Store selected task
        await state.update_data(selected_task=selected_task)
        
        # Show task details and start feedback collection
        formatted_task = format_task_name(selected_task.get('task', ''))
        task_details = (
            f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: <b>{formatted_task}</b>\n\n"
        )
        
        if selected_task.get('deadline'):
            task_details += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {selected_task.get('deadline')}\n"
            
        task_details += (
            "\nüîπ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞–ª–æ—Å—å –Ω–∞–¥ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π? "
            "–ë—ã–ª–∞ –ª–∏ –æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π, —Å –∫–∞–∫–∏–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å?"
        )
        
        await callback.message.edit_text(
            task_details, 
            parse_mode="HTML", 
            reply_markup=None
        )
        await state.set_state(ReportStates.waiting_for_feedback)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in task selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@user_router.callback_query(F.data == "cancel_report", ReportStates.selecting_task)
async def cancel_report_selection(callback: CallbackQuery, state: FSMContext):
    """Cancel report creation."""
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", 
        reply_markup=None
    )
    
    # Clear only report-related data, preserve authentication
    data = await state.get_data()
    employee_data = data.get("employee_data")
    employee_id = data.get("employee_id")
    authenticated = data.get("authenticated")
    is_admin = data.get("is_admin")
    
    await state.clear()
    await state.update_data(
        employee_data=employee_data,
        employee_id=employee_id,
        authenticated=authenticated,
        is_admin=is_admin
    )
    await callback.answer()


@user_router.message(ReportStates.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext):
    """Process feedback input."""
    feedback_text = message.text or message.caption or ""
    
    if not feedback_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∏–¥–±–µ–∫.")
        return
        
    await state.update_data(feedback=feedback_text)
    
    difficulties_text = (
        "–°–ø–∞—Å–∏–±–æ! üëç\n\n"
        "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö. –° —á–µ–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, "
        "—á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≥–¥–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?"
    )
    
    await message.answer(difficulties_text)
    await state.set_state(ReportStates.waiting_for_difficulties)


@user_router.message(ReportStates.waiting_for_difficulties)
async def process_difficulties(message: Message, state: FSMContext):
    """Process difficulties input."""
    difficulties_text = message.text or message.caption or ""
    
    if not difficulties_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π'.")
        return
        
    await state.update_data(difficulties=difficulties_text)
    
    daily_report_text = (
        "–û—Ç–ª–∏—á–Ω–æ! üëå\n\n"
        "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –¥–µ–Ω—å. "
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
    )
    
    await message.answer(daily_report_text)
    await state.set_state(ReportStates.waiting_for_daily_report)


@user_router.message(ReportStates.waiting_for_daily_report)
async def process_daily_report(message: Message, state: FSMContext):
    """Process daily report input."""
    daily_report_text = message.text or message.caption or ""
    
    if not daily_report_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –¥–µ–Ω—å.")
        return
        
    await state.update_data(daily_report=daily_report_text)
    
    # Show confirmation
    data = await state.get_data()
    feedback = data.get("feedback", "")
    difficulties = data.get("difficulties", "")
    daily_report = data.get("daily_report", "")
    
    confirmation_text = (
        "–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"<b>–§–∏–¥–±–µ–∫:</b>\n{html.escape(feedback)}\n\n"
        f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç–∏:</b>\n{html.escape(difficulties)}\n\n"
        f"<b>–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å:</b>\n{html.escape(daily_report)}\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?"
    )
    
    # Create confirmation keyboard
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="confirm_report"),
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="restart_report")
    )
    
    await message.answer(confirmation_text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(ReportStates.waiting_for_confirmation)


@user_router.callback_query(F.data == "confirm_report", ReportStates.waiting_for_confirmation)
async def confirm_report(callback: CallbackQuery, state: FSMContext, sheets_service: GoogleSheetsService):
    """Confirm and save the report."""
    try:
        data = await state.get_data()
        employee_id = data.get("employee_id", "")
        selected_task = data.get("selected_task", {})
        task_id = selected_task.get("task_id", "")
        feedback = data.get("feedback", "")
        difficulties = data.get("difficulties", "")
        daily_report = data.get("daily_report", "")
        
        if not task_id and not feedback.strip():
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞: –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=None
            )
            await state.clear()
            await callback.answer()
            return
        
        # Save to Google Sheets with task_id (empty for general reports)
        success = await sheets_service.save_daily_report(
            employee_id, task_id, feedback, difficulties, daily_report
        )
        
        if success:
            if task_id:
                # Format task name for success message
                formatted_task = format_task_name(selected_task.get('task', ''))
                success_message = f"–í–∞—à –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ <b>{formatted_task}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ! ‚úÖ"
            else:
                success_message = "–í–∞—à –æ–±—â–∏–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ! ‚úÖ"
                
            await callback.message.edit_text(
                success_message,
                parse_mode="HTML",
                reply_markup=None
            )
            logger.info(f"Report saved for employee {employee_id}, task_id: '{task_id}'")
        else:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )
            
        # Clear only report-related data, preserve authentication
        employee_data = data.get("employee_data")
        employee_id_stored = data.get("employee_id")
        authenticated = data.get("authenticated")
        is_admin = data.get("is_admin")
        
        await state.clear()
        await state.update_data(
            employee_data=employee_data,
            employee_id=employee_id_stored,
            authenticated=authenticated,
            is_admin=is_admin
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming report: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=None
        )
        await callback.answer()


@user_router.callback_query(F.data == "restart_report", ReportStates.waiting_for_confirmation)
async def restart_report(callback: CallbackQuery, state: FSMContext, sheets_service: GoogleSheetsService):
    """Restart the report collection process."""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )
    
    await start_report_collection(callback.message, state, sheets_service)
    await callback.answer()


@user_router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤—Ä—É—á–Ω—É—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ 21:00 –ú–°–ö.\n\n"
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –≤–∞—à–µ–º—É Telegram ID."
    )
    
    await message.answer(help_text)


@user_router.message(Command("logout"))
async def cmd_logout(message: Message, state: FSMContext):
    """Handle /logout command."""
    await state.clear()
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. \n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )


@user_router.message(~F.text.startswith('/'))
async def handle_any_message(message: Message, state: FSMContext, sheets_service: GoogleSheetsService, config: Config):
    """Handle any message - authenticate user if not already authenticated."""
    data = await state.get_data()
    
    if not data.get("authenticated"):
        # User not authenticated, try to authenticate them
        authenticated = await auto_authenticate_user(message, state, sheets_service, config)
        if not authenticated:
            return  # Authentication failed, user was notified
        
        # Get updated state data after authentication
        data = await state.get_data()
        
        # Show available commands after successful authentication
        if data.get("is_admin", False):
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ 21:00 –ú–°–ö."
            )
    else:
        # User is authenticated but sent an unknown command/message
        if data.get("is_admin", False):
            await message.answer(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
                "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
                "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )