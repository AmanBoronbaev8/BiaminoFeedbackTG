"""User handlers for employee functionality."""
import html
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from ..services import GoogleSheetsService
from ..states import AuthStates, ReportStates


user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, sheets_service: GoogleSheetsService):
    """Handle /start command."""
    # Check if user is already authenticated
    data = await state.get_data()
    if data.get("authenticated"):
        employee_data = data.get("employee_data", {})
        first_name = employee_data.get("–ò–º—è", "")
        await message.answer(
            f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, {first_name}! ‚úÖ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        )
        return
    
    await state.clear()
    
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BiaminoFeedback! üè¢\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</code>"
    )
    
    await message.answer(welcome_text, parse_mode="HTML")
    await state.set_state(AuthStates.waiting_for_name)


@user_router.message(AuthStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext, sheets_service: GoogleSheetsService):
    """Process employee name input."""
    try:
        name_parts = message.text.strip().split()
        
        if len(name_parts) != 2:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</code>",
                parse_mode="HTML"
            )
            return
            
        last_name, first_name = name_parts
        
        # Check if employee exists
        employee_data = await sheets_service.get_employee_data(last_name, first_name)
        
        if not employee_data:
            await message.answer(
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
            
        # Store name data and ask for password
        await state.update_data(last_name=last_name, first_name=first_name)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthStates.waiting_for_password)
        
    except Exception as e:
        logger.error(f"Error processing name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@user_router.message(AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext, sheets_service: GoogleSheetsService):
    """Process password input and authenticate."""
    try:
        data = await state.get_data()
        last_name = data.get("last_name")
        first_name = data.get("first_name")
        password = message.text.strip()
        
        # Verify credentials
        employee_data = await sheets_service.verify_employee_password(last_name, first_name, password)
        
        if not employee_data:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            return
            
        # Store employee data
        await state.update_data(
            employee_data=employee_data,
            employee_id=employee_data.get("ID", ""),
            authenticated=True
        )
        
        success_text = (
            f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n"
            f"–Ø –Ω–∞–ø–∏—à—É –≤–∞–º —Å–µ–≥–æ–¥–Ω—è –≤ 21:00 –ø–æ –ú–°–ö –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /report –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é."
        )
        
        await message.answer(success_text)
        # Clear the auth state after successful authentication
        await state.clear()
        # Restore the authentication data without any specific state
        await state.update_data(
            employee_data=employee_data,
            employee_id=employee_data.get("ID", ""),
            authenticated=True
        )
        
        logger.info(f"User {first_name} {last_name} authenticated successfully")
        
    except Exception as e:
        logger.error(f"Error processing password: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@user_router.message(Command("report"))
async def cmd_report(message: Message, state: FSMContext, sheets_service: GoogleSheetsService):
    """Handle /report command."""
    try:
        data = await state.get_data()
        
        if not data.get("authenticated"):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        employee_id = data.get("employee_id", "")
        
        # Check if report already submitted today
        today = datetime.now().strftime("%d.%m.%Y")
        has_report = await sheets_service.check_report_submitted(employee_id, today)
        
        if has_report:
            await message.answer("–í—ã —É–∂–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è! ‚úÖ")
            return
            
        await start_report_collection(message, state)
        
    except Exception as e:
        logger.error(f"Error handling report command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def start_report_collection(message: Message, state: FSMContext):
    """Start the report collection process."""
    feedback_text = (
        "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞! üìù\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞–ª–æ—Å—å –Ω–∞–¥ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏? "
        "–ë—ã–ª–∏ –ª–∏ –æ–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏, —Å –∫–∞–∫–∏–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å?"
    )
    
    await message.answer(feedback_text)
    await state.set_state(ReportStates.waiting_for_feedback)


@user_router.message(ReportStates.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext):
    """Process feedback input."""
    feedback_text = message.text or message.caption or ""
    
    if not feedback_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∏–¥–±–µ–∫.")
        return
        
    await state.update_data(feedback=feedback_text)
    
    difficulties_text = (
        "–°–ø–∞—Å–∏–±–æ! üëç\n\n"
        "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö. –° —á–µ–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, "
        "—á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≥–¥–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?"
    )
    
    await message.answer(difficulties_text)
    await state.set_state(ReportStates.waiting_for_difficulties)


@user_router.message(ReportStates.waiting_for_difficulties)
async def process_difficulties(message: Message, state: FSMContext):
    """Process difficulties input."""
    difficulties_text = message.text or message.caption or ""
    
    if not difficulties_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π'.")
        return
        
    await state.update_data(difficulties=difficulties_text)
    
    daily_report_text = (
        "–û—Ç–ª–∏—á–Ω–æ! üëå\n\n"
        "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –¥–µ–Ω—å. "
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
    )
    
    await message.answer(daily_report_text)
    await state.set_state(ReportStates.waiting_for_daily_report)


@user_router.message(ReportStates.waiting_for_daily_report)
async def process_daily_report(message: Message, state: FSMContext):
    """Process daily report input."""
    daily_report_text = message.text or message.caption or ""
    
    if not daily_report_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –¥–µ–Ω—å.")
        return
        
    await state.update_data(daily_report=daily_report_text)
    
    # Show confirmation
    data = await state.get_data()
    feedback = data.get("feedback", "")
    difficulties = data.get("difficulties", "")
    daily_report = data.get("daily_report", "")
    
    confirmation_text = (
        "–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"<b>–§–∏–¥–±–µ–∫:</b>\n{html.escape(feedback)}\n\n"
        f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç–∏:</b>\n{html.escape(difficulties)}\n\n"
        f"<b>–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å:</b>\n{html.escape(daily_report)}\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?"
    )
    
    # Create confirmation keyboard
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="confirm_report"),
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="restart_report")
    )
    
    await message.answer(confirmation_text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(ReportStates.waiting_for_confirmation)


@user_router.callback_query(F.data == "confirm_report", ReportStates.waiting_for_confirmation)
async def confirm_report(callback: CallbackQuery, state: FSMContext, sheets_service: GoogleSheetsService):
    """Confirm and save the report."""
    try:
        data = await state.get_data()
        employee_id = data.get("employee_id", "")
        feedback = data.get("feedback", "")
        difficulties = data.get("difficulties", "")
        daily_report = data.get("daily_report", "")
        
        # Save to Google Sheets
        success = await sheets_service.save_daily_report(
            employee_id, feedback, difficulties, daily_report
        )
        
        if success:
            await callback.message.edit_text(
                "–í–∞—à –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ! ‚úÖ",
                reply_markup=None
            )
            logger.info(f"Report saved for employee {employee_id}")
        else:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )
            
        # Clear only report-related data, preserve authentication
        employee_data = data.get("employee_data")
        employee_id = data.get("employee_id")
        authenticated = data.get("authenticated")
        
        await state.clear()
        await state.update_data(
            employee_data=employee_data,
            employee_id=employee_id,
            authenticated=authenticated
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming report: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=None
        )
        await callback.answer()


@user_router.callback_query(F.data == "restart_report", ReportStates.waiting_for_confirmation)
async def restart_report(callback: CallbackQuery, state: FSMContext):
    """Restart the report collection process."""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )
    
    await start_report_collection(callback.message, state)
    await callback.answer()


@user_router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤—Ä—É—á–Ω—É—é\n"
        "/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ 21:00 –ú–°–ö."
    )
    
    await message.answer(help_text)


@user_router.message(Command("logout"))
async def cmd_logout(message: Message, state: FSMContext):
    """Handle /logout command."""
    await state.clear()
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. \n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )