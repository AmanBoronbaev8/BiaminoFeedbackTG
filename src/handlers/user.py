"""User handlers for employee functionality."""
import html
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from ..config_data import Config
from ..services import GoogleSheetsService
from ..states import ReportStates
from ..utils.telegram_utils import parse_telegram_ids, is_admin


user_router = Router()


async def auto_authenticate_user(message: Message, state: FSMContext, sheets_service: GoogleSheetsService, config: Config = None) -> bool:
    """Automatically authenticate user based on TelegramID."""
    try:
        telegram_id = message.from_user.id
        
        # Check if user is admin first - admins don't need to be in employee database
        if config and is_admin(telegram_id, config):
            await state.update_data(
                employee_data={"ID": f"admin_{telegram_id}", "–ò–º—è": "Admin", "–§–∞–º–∏–ª–∏—è": "User"},
                employee_id=f"admin_{telegram_id}",
                authenticated=True,
                is_admin=True
            )
            
            await message.answer(
                "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
            logger.info(f"Admin {telegram_id} authenticated successfully")
            return True
        
        # Try to find employee by TelegramID
        employee_data = await sheets_service.get_employee_by_telegram_id(telegram_id)
        
        if employee_data:
            # Store employee data permanently
            await state.update_data(
                employee_data=employee_data,
                employee_id=employee_data.get("ID", ""),
                authenticated=True,
                is_admin=False
            )
            
            # Get full name
            first_name = employee_data.get("–ò–º—è", "")
            last_name = employee_data.get("–§–∞–º–∏–ª–∏—è", "")
            full_name = f"{last_name} {first_name}".strip()
            
            # Send authentication success message
            auth_text = f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {full_name}! ‚úÖ"
            await message.answer(auth_text)
            
            logger.info(f"User {telegram_id} authenticated as {full_name}")
            return True
        else:
            # User not found in the system
            await message.answer(
                "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            logger.warning(f"Unknown user with TelegramID {telegram_id} tried to access the bot")
            return False
            
    except Exception as e:
        logger.error(f"Error in auto authentication: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, sheets_service: GoogleSheetsService, config: Config):
    """Handle /start command with automatic authentication."""
    # Check if user is already authenticated
    data = await state.get_data()
    if data.get("authenticated"):
        employee_data = data.get("employee_data", {})
        if data.get("is_admin"):
            await message.answer(
                "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
        else:
            first_name = employee_data.get("–ò–º—è", "")
            last_name = employee_data.get("–§–∞–º–∏–ª–∏—è", "")
            full_name = f"{last_name} {first_name}".strip()
            
            await message.answer(
                f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {full_name}! ‚úÖ\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞."
            )
        return
    
    # Auto-authenticate based on TelegramID
    await auto_authenticate_user(message, state, sheets_service, config)


@user_router.message(Command("report"))
async def cmd_report(message: Message, state: FSMContext, sheets_service: GoogleSheetsService):
    """Handle /report command."""
    try:
        data = await state.get_data()
        
        if not data.get("authenticated"):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        employee_id = data.get("employee_id", "")
        
        # Check if report already submitted today
        today = datetime.now().strftime("%d.%m.%Y")
        has_report = await sheets_service.check_report_submitted(employee_id, today)
        
        if has_report:
            await message.answer("–í—ã —É–∂–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è! ‚úÖ")
            return
            
        await start_report_collection(message, state)
        
    except Exception as e:
        logger.error(f"Error handling report command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def start_report_collection(message: Message, state: FSMContext):
    """Start the report collection process."""
    feedback_text = (
        "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞! üìù\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞–ª–æ—Å—å –Ω–∞–¥ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏? "
        "–ë—ã–ª–∏ –ª–∏ –æ–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏, —Å –∫–∞–∫–∏–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å?"
    )
    
    await message.answer(feedback_text)
    await state.set_state(ReportStates.waiting_for_feedback)


@user_router.message(ReportStates.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext):
    """Process feedback input."""
    feedback_text = message.text or message.caption or ""
    
    if not feedback_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∏–¥–±–µ–∫.")
        return
        
    await state.update_data(feedback=feedback_text)
    
    difficulties_text = (
        "–°–ø–∞—Å–∏–±–æ! üëç\n\n"
        "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö. –° —á–µ–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, "
        "—á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≥–¥–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?"
    )
    
    await message.answer(difficulties_text)
    await state.set_state(ReportStates.waiting_for_difficulties)


@user_router.message(ReportStates.waiting_for_difficulties)
async def process_difficulties(message: Message, state: FSMContext):
    """Process difficulties input."""
    difficulties_text = message.text or message.caption or ""
    
    if not difficulties_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π'.")
        return
        
    await state.update_data(difficulties=difficulties_text)
    
    daily_report_text = (
        "–û—Ç–ª–∏—á–Ω–æ! üëå\n\n"
        "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –¥–µ–Ω—å. "
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
    )
    
    await message.answer(daily_report_text)
    await state.set_state(ReportStates.waiting_for_daily_report)


@user_router.message(ReportStates.waiting_for_daily_report)
async def process_daily_report(message: Message, state: FSMContext):
    """Process daily report input."""
    daily_report_text = message.text or message.caption or ""
    
    if not daily_report_text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –¥–µ–Ω—å.")
        return
        
    await state.update_data(daily_report=daily_report_text)
    
    # Show confirmation
    data = await state.get_data()
    feedback = data.get("feedback", "")
    difficulties = data.get("difficulties", "")
    daily_report = data.get("daily_report", "")
    
    confirmation_text = (
        "–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"<b>–§–∏–¥–±–µ–∫:</b>\n{html.escape(feedback)}\n\n"
        f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç–∏:</b>\n{html.escape(difficulties)}\n\n"
        f"<b>–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å:</b>\n{html.escape(daily_report)}\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?"
    )
    
    # Create confirmation keyboard
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="confirm_report"),
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="restart_report")
    )
    
    await message.answer(confirmation_text, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(ReportStates.waiting_for_confirmation)


@user_router.callback_query(F.data == "confirm_report", ReportStates.waiting_for_confirmation)
async def confirm_report(callback: CallbackQuery, state: FSMContext, sheets_service: GoogleSheetsService):
    """Confirm and save the report."""
    try:
        data = await state.get_data()
        employee_id = data.get("employee_id", "")
        feedback = data.get("feedback", "")
        difficulties = data.get("difficulties", "")
        daily_report = data.get("daily_report", "")
        
        # Save to Google Sheets
        success = await sheets_service.save_daily_report(
            employee_id, feedback, difficulties, daily_report
        )
        
        if success:
            await callback.message.edit_text(
                "–í–∞—à –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ! ‚úÖ",
                reply_markup=None
            )
            logger.info(f"Report saved for employee {employee_id}")
        else:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )
            
        # Clear only report-related data, preserve authentication
        employee_data = data.get("employee_data")
        employee_id = data.get("employee_id")
        authenticated = data.get("authenticated")
        
        await state.clear()
        await state.update_data(
            employee_data=employee_data,
            employee_id=employee_id,
            authenticated=authenticated
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming report: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=None
        )
        await callback.answer()


@user_router.callback_query(F.data == "restart_report", ReportStates.waiting_for_confirmation)
async def restart_report(callback: CallbackQuery, state: FSMContext):
    """Restart the report collection process."""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )
    
    await start_report_collection(callback.message, state)
    await callback.answer()


@user_router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤—Ä—É—á–Ω—É—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ 21:00 –ú–°–ö.\n\n"
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –≤–∞—à–µ–º—É Telegram ID."
    )
    
    await message.answer(help_text)


@user_router.message(Command("logout"))
async def cmd_logout(message: Message, state: FSMContext):
    """Handle /logout command."""
    await state.clear()
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. \n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )


@user_router.message(~F.text.startswith('/'))
async def handle_any_message(message: Message, state: FSMContext, sheets_service: GoogleSheetsService, config: Config):
    """Handle any message - authenticate user if not already authenticated."""
    data = await state.get_data()
    
    if not data.get("authenticated"):
        # User not authenticated, try to authenticate them
        authenticated = await auto_authenticate_user(message, state, sheets_service, config)
        if not authenticated:
            return  # Authentication failed, user was notified
        
        # Get updated state data after authentication
        data = await state.get_data()
        
        # Show available commands after successful authentication
        if data.get("is_admin", False):
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ 21:00 –ú–°–ö."
            )
    else:
        # User is authenticated but sent an unknown command/message
        if data.get("is_admin", False):
            await message.answer(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
                "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
                "/report - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )